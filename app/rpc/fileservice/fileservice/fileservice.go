// Code generated by goctl. DO NOT EDIT.
// Source: fileservice.proto

package fileservice

import (
	"context"

	"oos-system/app/rpc/fileservice/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CompressionReq  = pb.CompressionReq
	CompressionResp = pb.CompressionResp
	CopyFileReq     = pb.CopyFileReq
	CopyFileResp    = pb.CopyFileResp
	GetRequest      = pb.GetRequest
	GetResponse     = pb.GetResponse
	MergeChunkReq   = pb.MergeChunkReq
	MergeChunkResp  = pb.MergeChunkResp
	PreviewReq      = pb.PreviewReq
	PreviewResp     = pb.PreviewResp
	PutRequest      = pb.PutRequest
	PutResponse     = pb.PutResponse
	UploadChunkReq  = pb.UploadChunkReq
	UploadChunkResp = pb.UploadChunkResp
	VerifyReq       = pb.VerifyReq
	VerifyResp      = pb.VerifyResp

	Fileservice interface {
		UploadChunk(ctx context.Context, in *UploadChunkReq, opts ...grpc.CallOption) (*UploadChunkResp, error)
		Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error)
		MergeChunk(ctx context.Context, in *MergeChunkReq, opts ...grpc.CallOption) (*MergeChunkResp, error)
		Preview(ctx context.Context, in *PreviewReq, opts ...grpc.CallOption) (*PreviewResp, error)
		Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
		Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
		CopyFile(ctx context.Context, in *CopyFileReq, opts ...grpc.CallOption) (*CopyFileResp, error)
		Compression(ctx context.Context, in *CompressionReq, opts ...grpc.CallOption) (*CompressionResp, error)
	}

	defaultFileservice struct {
		cli zrpc.Client
	}
)

func NewFileservice(cli zrpc.Client) Fileservice {
	return &defaultFileservice{
		cli: cli,
	}
}

func (m *defaultFileservice) UploadChunk(ctx context.Context, in *UploadChunkReq, opts ...grpc.CallOption) (*UploadChunkResp, error) {
	client := pb.NewFileserviceClient(m.cli.Conn())
	return client.UploadChunk(ctx, in, opts...)
}

func (m *defaultFileservice) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	client := pb.NewFileserviceClient(m.cli.Conn())
	return client.Verify(ctx, in, opts...)
}

func (m *defaultFileservice) MergeChunk(ctx context.Context, in *MergeChunkReq, opts ...grpc.CallOption) (*MergeChunkResp, error) {
	client := pb.NewFileserviceClient(m.cli.Conn())
	return client.MergeChunk(ctx, in, opts...)
}

func (m *defaultFileservice) Preview(ctx context.Context, in *PreviewReq, opts ...grpc.CallOption) (*PreviewResp, error) {
	client := pb.NewFileserviceClient(m.cli.Conn())
	return client.Preview(ctx, in, opts...)
}

func (m *defaultFileservice) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	client := pb.NewFileserviceClient(m.cli.Conn())
	return client.Put(ctx, in, opts...)
}

func (m *defaultFileservice) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	client := pb.NewFileserviceClient(m.cli.Conn())
	return client.Get(ctx, in, opts...)
}

func (m *defaultFileservice) CopyFile(ctx context.Context, in *CopyFileReq, opts ...grpc.CallOption) (*CopyFileResp, error) {
	client := pb.NewFileserviceClient(m.cli.Conn())
	return client.CopyFile(ctx, in, opts...)
}

func (m *defaultFileservice) Compression(ctx context.Context, in *CompressionReq, opts ...grpc.CallOption) (*CompressionResp, error) {
	client := pb.NewFileserviceClient(m.cli.Conn())
	return client.Compression(ctx, in, opts...)
}
