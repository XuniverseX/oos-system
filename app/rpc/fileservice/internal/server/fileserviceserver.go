// Code generated by goctl. DO NOT EDIT.
// Source: fileservice.proto

package server

import (
	"context"

	"oos-system/app/rpc/fileservice/internal/logic"
	"oos-system/app/rpc/fileservice/internal/svc"
	"oos-system/app/rpc/fileservice/pb"
)

type FileserviceServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedFileserviceServer
}

func NewFileserviceServer(svcCtx *svc.ServiceContext) *FileserviceServer {
	return &FileserviceServer{
		svcCtx: svcCtx,
	}
}

func (s *FileserviceServer) UploadChunk(ctx context.Context, in *pb.UploadChunkReq) (*pb.UploadChunkResp, error) {
	l := logic.NewUploadChunkLogic(ctx, s.svcCtx)
	return l.UploadChunk(in)
}

func (s *FileserviceServer) Verify(ctx context.Context, in *pb.VerifyReq) (*pb.VerifyResp, error) {
	l := logic.NewVerifyLogic(ctx, s.svcCtx)
	return l.Verify(in)
}

func (s *FileserviceServer) MergeChunk(ctx context.Context, in *pb.MergeChunkReq) (*pb.MergeChunkResp, error) {
	l := logic.NewMergeChunkLogic(ctx, s.svcCtx)
	return l.MergeChunk(in)
}

func (s *FileserviceServer) Preview(ctx context.Context, in *pb.PreviewReq) (*pb.PreviewResp, error) {
	l := logic.NewPreviewLogic(ctx, s.svcCtx)
	return l.Preview(in)
}

func (s *FileserviceServer) Put(ctx context.Context, in *pb.PutRequest) (*pb.PutResponse, error) {
	l := logic.NewPutLogic(ctx, s.svcCtx)
	return l.Put(in)
}

func (s *FileserviceServer) Get(ctx context.Context, in *pb.GetRequest) (*pb.GetResponse, error) {
	l := logic.NewGetLogic(ctx, s.svcCtx)
	return l.Get(in)
}

func (s *FileserviceServer) CopyFile(ctx context.Context, in *pb.CopyFileReq) (*pb.CopyFileResp, error) {
	l := logic.NewCopyFileLogic(ctx, s.svcCtx)
	return l.CopyFile(in)
}

func (s *FileserviceServer) Compression(ctx context.Context, in *pb.CompressionReq) (*pb.CompressionResp, error) {
	l := logic.NewCompressionLogic(ctx, s.svcCtx)
	return l.Compression(in)
}
