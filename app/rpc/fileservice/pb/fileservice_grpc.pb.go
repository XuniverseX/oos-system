// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: fileservice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Fileservice_UploadChunk_FullMethodName = "/fileservice.fileservice/uploadChunk"
	Fileservice_Verify_FullMethodName      = "/fileservice.fileservice/verify"
	Fileservice_MergeChunk_FullMethodName  = "/fileservice.fileservice/mergeChunk"
	Fileservice_Preview_FullMethodName     = "/fileservice.fileservice/preview"
	Fileservice_Put_FullMethodName         = "/fileservice.fileservice/Put"
	Fileservice_Get_FullMethodName         = "/fileservice.fileservice/Get"
	Fileservice_CopyFile_FullMethodName    = "/fileservice.fileservice/copyFile"
	Fileservice_Compression_FullMethodName = "/fileservice.fileservice/compression"
)

// FileserviceClient is the client API for Fileservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileserviceClient interface {
	UploadChunk(ctx context.Context, in *UploadChunkReq, opts ...grpc.CallOption) (*UploadChunkResp, error)
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error)
	MergeChunk(ctx context.Context, in *MergeChunkReq, opts ...grpc.CallOption) (*MergeChunkResp, error)
	Preview(ctx context.Context, in *PreviewReq, opts ...grpc.CallOption) (*PreviewResp, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	CopyFile(ctx context.Context, in *CopyFileReq, opts ...grpc.CallOption) (*CopyFileResp, error)
	Compression(ctx context.Context, in *CompressionReq, opts ...grpc.CallOption) (*CompressionResp, error)
}

type fileserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileserviceClient(cc grpc.ClientConnInterface) FileserviceClient {
	return &fileserviceClient{cc}
}

func (c *fileserviceClient) UploadChunk(ctx context.Context, in *UploadChunkReq, opts ...grpc.CallOption) (*UploadChunkResp, error) {
	out := new(UploadChunkResp)
	err := c.cc.Invoke(ctx, Fileservice_UploadChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserviceClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	out := new(VerifyResp)
	err := c.cc.Invoke(ctx, Fileservice_Verify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserviceClient) MergeChunk(ctx context.Context, in *MergeChunkReq, opts ...grpc.CallOption) (*MergeChunkResp, error) {
	out := new(MergeChunkResp)
	err := c.cc.Invoke(ctx, Fileservice_MergeChunk_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserviceClient) Preview(ctx context.Context, in *PreviewReq, opts ...grpc.CallOption) (*PreviewResp, error) {
	out := new(PreviewResp)
	err := c.cc.Invoke(ctx, Fileservice_Preview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserviceClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, Fileservice_Put_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserviceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Fileservice_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserviceClient) CopyFile(ctx context.Context, in *CopyFileReq, opts ...grpc.CallOption) (*CopyFileResp, error) {
	out := new(CopyFileResp)
	err := c.cc.Invoke(ctx, Fileservice_CopyFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileserviceClient) Compression(ctx context.Context, in *CompressionReq, opts ...grpc.CallOption) (*CompressionResp, error) {
	out := new(CompressionResp)
	err := c.cc.Invoke(ctx, Fileservice_Compression_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileserviceServer is the server API for Fileservice service.
// All implementations must embed UnimplementedFileserviceServer
// for forward compatibility
type FileserviceServer interface {
	UploadChunk(context.Context, *UploadChunkReq) (*UploadChunkResp, error)
	Verify(context.Context, *VerifyReq) (*VerifyResp, error)
	MergeChunk(context.Context, *MergeChunkReq) (*MergeChunkResp, error)
	Preview(context.Context, *PreviewReq) (*PreviewResp, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	CopyFile(context.Context, *CopyFileReq) (*CopyFileResp, error)
	Compression(context.Context, *CompressionReq) (*CompressionResp, error)
	mustEmbedUnimplementedFileserviceServer()
}

// UnimplementedFileserviceServer must be embedded to have forward compatible implementations.
type UnimplementedFileserviceServer struct {
}

func (UnimplementedFileserviceServer) UploadChunk(context.Context, *UploadChunkReq) (*UploadChunkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadChunk not implemented")
}
func (UnimplementedFileserviceServer) Verify(context.Context, *VerifyReq) (*VerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedFileserviceServer) MergeChunk(context.Context, *MergeChunkReq) (*MergeChunkResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeChunk not implemented")
}
func (UnimplementedFileserviceServer) Preview(context.Context, *PreviewReq) (*PreviewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Preview not implemented")
}
func (UnimplementedFileserviceServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedFileserviceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFileserviceServer) CopyFile(context.Context, *CopyFileReq) (*CopyFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (UnimplementedFileserviceServer) Compression(context.Context, *CompressionReq) (*CompressionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compression not implemented")
}
func (UnimplementedFileserviceServer) mustEmbedUnimplementedFileserviceServer() {}

// UnsafeFileserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileserviceServer will
// result in compilation errors.
type UnsafeFileserviceServer interface {
	mustEmbedUnimplementedFileserviceServer()
}

func RegisterFileserviceServer(s grpc.ServiceRegistrar, srv FileserviceServer) {
	s.RegisterService(&Fileservice_ServiceDesc, srv)
}

func _Fileservice_UploadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).UploadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileservice_UploadChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).UploadChunk(ctx, req.(*UploadChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileservice_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileservice_Verify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).Verify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileservice_MergeChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeChunkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).MergeChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileservice_MergeChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).MergeChunk(ctx, req.(*MergeChunkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileservice_Preview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).Preview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileservice_Preview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).Preview(ctx, req.(*PreviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileservice_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileservice_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileservice_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileservice_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileservice_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileservice_CopyFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).CopyFile(ctx, req.(*CopyFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fileservice_Compression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileserviceServer).Compression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fileservice_Compression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileserviceServer).Compression(ctx, req.(*CompressionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Fileservice_ServiceDesc is the grpc.ServiceDesc for Fileservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fileservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileservice.fileservice",
	HandlerType: (*FileserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "uploadChunk",
			Handler:    _Fileservice_UploadChunk_Handler,
		},
		{
			MethodName: "verify",
			Handler:    _Fileservice_Verify_Handler,
		},
		{
			MethodName: "mergeChunk",
			Handler:    _Fileservice_MergeChunk_Handler,
		},
		{
			MethodName: "preview",
			Handler:    _Fileservice_Preview_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Fileservice_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Fileservice_Get_Handler,
		},
		{
			MethodName: "copyFile",
			Handler:    _Fileservice_CopyFile_Handler,
		},
		{
			MethodName: "compression",
			Handler:    _Fileservice_Compression_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileservice.proto",
}
