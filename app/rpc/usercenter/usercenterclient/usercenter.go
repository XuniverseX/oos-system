// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package usercenterclient

import (
	"context"

	"oos-system/app/rpc/usercenter/usercenter"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DelOldCaptchaReq  = usercenter.DelOldCaptchaReq
	DelReq            = usercenter.DelReq
	GenerateTokenReq  = usercenter.GenerateTokenReq
	GenerateTokenResp = usercenter.GenerateTokenResp
	GetCaptchaReq     = usercenter.GetCaptchaReq
	GetCaptchaResp    = usercenter.GetCaptchaResp
	IsExitUserReq     = usercenter.IsExitUserReq
	LoginReq          = usercenter.LoginReq
	LoginResp         = usercenter.LoginResp
	RegisterReq       = usercenter.RegisterReq
	SucResp           = usercenter.SucResp
	UserInfoReq       = usercenter.UserInfoReq
	UserInfoResp      = usercenter.UserInfoResp

	Usercenter interface {
		GetCaptcha(ctx context.Context, in *GetCaptchaReq, opts ...grpc.CallOption) (*GetCaptchaResp, error)
		DelOldCaptcha(ctx context.Context, in *DelOldCaptchaReq, opts ...grpc.CallOption) (*SucResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*SucResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		UpdatePassword(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*SucResp, error)
		DeleteBySelf(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*SucResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		IsExitUser(ctx context.Context, in *IsExitUserReq, opts ...grpc.CallOption) (*SucResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) GetCaptcha(ctx context.Context, in *GetCaptchaReq, opts ...grpc.CallOption) (*GetCaptchaResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.GetCaptcha(ctx, in, opts...)
}

func (m *defaultUsercenter) DelOldCaptcha(ctx context.Context, in *DelOldCaptchaReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.DelOldCaptcha(ctx, in, opts...)
}

func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUsercenter) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUsercenter) UpdatePassword(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.UpdatePassword(ctx, in, opts...)
}

func (m *defaultUsercenter) DeleteBySelf(ctx context.Context, in *DelReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.DeleteBySelf(ctx, in, opts...)
}

func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUsercenter) IsExitUser(ctx context.Context, in *IsExitUserReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.IsExitUser(ctx, in, opts...)
}
