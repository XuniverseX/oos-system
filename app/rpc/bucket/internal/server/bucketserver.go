// Code generated by goctl. DO NOT EDIT.
// Source: bucket.proto

package server

import (
	"context"

	"oos-system/app/rpc/bucket/bucket"
	"oos-system/app/rpc/bucket/internal/logic"
	"oos-system/app/rpc/bucket/internal/svc"
)

type BucketServer struct {
	svcCtx *svc.ServiceContext
	bucket.UnimplementedBucketServer
}

func NewBucketServer(svcCtx *svc.ServiceContext) *BucketServer {
	return &BucketServer{
		svcCtx: svcCtx,
	}
}

func (s *BucketServer) DelBucket(ctx context.Context, in *bucket.DelBucketReq) (*bucket.SucResp, error) {
	l := logic.NewDelBucketLogic(ctx, s.svcCtx)
	return l.DelBucket(in)
}

// rpc getAllBucket(GetAllBucketReq) returns(AllBucketResp); // 获取用户所有桶对象
func (s *BucketServer) GetMyBucket(ctx context.Context, in *bucket.GetMyBucketReq) (*bucket.AllBucketResp, error) {
	l := logic.NewGetMyBucketLogic(ctx, s.svcCtx)
	return l.GetMyBucket(in)
}

func (s *BucketServer) GetManageBucket(ctx context.Context, in *bucket.GetManageBucketReq) (*bucket.AllBucketResp, error) {
	l := logic.NewGetManageBucketLogic(ctx, s.svcCtx)
	return l.GetManageBucket(in)
}

// rpc getBucketByBucketName(GetBucketByBucketNameReq) returns(AllBucketResp); // 根据桶名模糊查询桶列表返回
func (s *BucketServer) GetMyBucketByBucketName(ctx context.Context, in *bucket.GetBucketByBucketNameReq) (*bucket.AllBucketResp, error) {
	l := logic.NewGetMyBucketByBucketNameLogic(ctx, s.svcCtx)
	return l.GetMyBucketByBucketName(in)
}

func (s *BucketServer) GetManageBucketByBucketName(ctx context.Context, in *bucket.GetBucketByBucketNameReq) (*bucket.AllBucketResp, error) {
	l := logic.NewGetManageBucketByBucketNameLogic(ctx, s.svcCtx)
	return l.GetManageBucketByBucketName(in)
}

func (s *BucketServer) CountBucket(ctx context.Context, in *bucket.CountBucketReq) (*bucket.CountBucketResp, error) {
	l := logic.NewCountBucketLogic(ctx, s.svcCtx)
	return l.CountBucket(in)
}

func (s *BucketServer) CreateBucketInfo(ctx context.Context, in *bucket.CreateBucketInfoReq) (*bucket.SucResp, error) {
	l := logic.NewCreateBucketInfoLogic(ctx, s.svcCtx)
	return l.CreateBucketInfo(in)
}

func (s *BucketServer) UpdateBucketSizeAndNumInfo(ctx context.Context, in *bucket.UpdateBucketSizeAndNumReq) (*bucket.SucResp, error) {
	l := logic.NewUpdateBucketSizeAndNumInfoLogic(ctx, s.svcCtx)
	return l.UpdateBucketSizeAndNumInfo(in)
}

func (s *BucketServer) UpdateBucketPermission(ctx context.Context, in *bucket.UpdateBucketPermission) (*bucket.SucResp, error) {
	l := logic.NewUpdateBucketPermissionLogic(ctx, s.svcCtx)
	return l.UpdateBucketPermission(in)
}

// 秒传逻辑
func (s *BucketServer) AddHashCode(ctx context.Context, in *bucket.HashCodeReq) (*bucket.SucResp, error) {
	l := logic.NewAddHashCodeLogic(ctx, s.svcCtx)
	return l.AddHashCode(in)
}

func (s *BucketServer) DelHashCode(ctx context.Context, in *bucket.HashCodeReq) (*bucket.SucResp, error) {
	l := logic.NewDelHashCodeLogic(ctx, s.svcCtx)
	return l.DelHashCode(in)
}

func (s *BucketServer) HasHashCode(ctx context.Context, in *bucket.HashCodeReq) (*bucket.SucResp, error) {
	l := logic.NewHasHashCodeLogic(ctx, s.svcCtx)
	return l.HasHashCode(in)
}

func (s *BucketServer) AddPolicy(ctx context.Context, in *bucket.PolicyReq) (*bucket.SucResp, error) {
	l := logic.NewAddPolicyLogic(ctx, s.svcCtx)
	return l.AddPolicy(in)
}

func (s *BucketServer) RemovePolicy(ctx context.Context, in *bucket.PolicyReq) (*bucket.SucResp, error) {
	l := logic.NewRemovePolicyLogic(ctx, s.svcCtx)
	return l.RemovePolicy(in)
}

func (s *BucketServer) UpdatePolicy(ctx context.Context, in *bucket.UpdatePolicyReq) (*bucket.SucResp, error) {
	l := logic.NewUpdatePolicyLogic(ctx, s.svcCtx)
	return l.UpdatePolicy(in)
}

func (s *BucketServer) VerifyPermission(ctx context.Context, in *bucket.PolicyReq) (*bucket.SucResp, error) {
	l := logic.NewVerifyPermissionLogic(ctx, s.svcCtx)
	return l.VerifyPermission(in)
}

func (s *BucketServer) GetPolicy(ctx context.Context, in *bucket.GetPolicyReq) (*bucket.GetPolicyResp, error) {
	l := logic.NewGetPolicyLogic(ctx, s.svcCtx)
	return l.GetPolicy(in)
}

func (s *BucketServer) GetAllBucketPolicy(ctx context.Context, in *bucket.GetAllBucketPolicyReq) (*bucket.GetAllBucketPolicyResp, error) {
	l := logic.NewGetAllBucketPolicyLogic(ctx, s.svcCtx)
	return l.GetAllBucketPolicy(in)
}

func (s *BucketServer) DelBucketAllPolicy(ctx context.Context, in *bucket.DelBucketAllPolicyReq) (*bucket.SucResp, error) {
	l := logic.NewDelBucketAllPolicyLogic(ctx, s.svcCtx)
	return l.DelBucketAllPolicy(in)
}

func (s *BucketServer) DelUserAllPolicy(ctx context.Context, in *bucket.DelUserAllPolicy) (*bucket.SucResp, error) {
	l := logic.NewDelUserAllPolicyLogic(ctx, s.svcCtx)
	return l.DelUserAllPolicy(in)
}

func (s *BucketServer) DelBucketAllHash(ctx context.Context, in *bucket.DelBucketAllHashReq) (*bucket.SucResp, error) {
	l := logic.NewDelBucketAllHashLogic(ctx, s.svcCtx)
	return l.DelBucketAllHash(in)
}
