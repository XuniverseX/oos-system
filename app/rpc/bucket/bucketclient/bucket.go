// Code generated by goctl. DO NOT EDIT.
// Source: bucket.proto

package bucketclient

import (
	"context"

	"oos-system/app/rpc/bucket/bucket"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AllBucketResp             = bucket.AllBucketResp
	BucketInfoResp            = bucket.BucketInfoResp
	CountBucketReq            = bucket.CountBucketReq
	CountBucketResp           = bucket.CountBucketResp
	CreateBucketInfoReq       = bucket.CreateBucketInfoReq
	DelBucketAllHashReq       = bucket.DelBucketAllHashReq
	DelBucketAllPolicyReq     = bucket.DelBucketAllPolicyReq
	DelBucketReq              = bucket.DelBucketReq
	DelUserAllPolicy          = bucket.DelUserAllPolicy
	GetAllBucketPolicyReq     = bucket.GetAllBucketPolicyReq
	GetAllBucketPolicyResp    = bucket.GetAllBucketPolicyResp
	GetAllBucketReq           = bucket.GetAllBucketReq
	GetBucketByBucketNameReq  = bucket.GetBucketByBucketNameReq
	GetManageBucketReq        = bucket.GetManageBucketReq
	GetMyBucketReq            = bucket.GetMyBucketReq
	GetPolicyReq              = bucket.GetPolicyReq
	GetPolicyResp             = bucket.GetPolicyResp
	HashCodeReq               = bucket.HashCodeReq
	PolicyReq                 = bucket.PolicyReq
	SucResp                   = bucket.SucResp
	UpdateBucketPermission    = bucket.UpdateBucketPermission
	UpdateBucketSizeAndNumReq = bucket.UpdateBucketSizeAndNumReq
	UpdatePolicyReq           = bucket.UpdatePolicyReq
	UserPolicyInfo            = bucket.UserPolicyInfo

	Bucket interface {
		DelBucket(ctx context.Context, in *DelBucketReq, opts ...grpc.CallOption) (*SucResp, error)
		// rpc getAllBucket(GetAllBucketReq) returns(AllBucketResp); // 获取用户所有桶对象
		GetMyBucket(ctx context.Context, in *GetMyBucketReq, opts ...grpc.CallOption) (*AllBucketResp, error)
		GetManageBucket(ctx context.Context, in *GetManageBucketReq, opts ...grpc.CallOption) (*AllBucketResp, error)
		// rpc getBucketByBucketName(GetBucketByBucketNameReq) returns(AllBucketResp); // 根据桶名模糊查询桶列表返回
		GetMyBucketByBucketName(ctx context.Context, in *GetBucketByBucketNameReq, opts ...grpc.CallOption) (*AllBucketResp, error)
		GetManageBucketByBucketName(ctx context.Context, in *GetBucketByBucketNameReq, opts ...grpc.CallOption) (*AllBucketResp, error)
		CountBucket(ctx context.Context, in *CountBucketReq, opts ...grpc.CallOption) (*CountBucketResp, error)
		CreateBucketInfo(ctx context.Context, in *CreateBucketInfoReq, opts ...grpc.CallOption) (*SucResp, error)
		UpdateBucketSizeAndNumInfo(ctx context.Context, in *UpdateBucketSizeAndNumReq, opts ...grpc.CallOption) (*SucResp, error)
		UpdateBucketPermission(ctx context.Context, in *UpdateBucketPermission, opts ...grpc.CallOption) (*SucResp, error)
		// 秒传逻辑
		AddHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error)
		DelHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error)
		HasHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error)
		AddPolicy(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error)
		RemovePolicy(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error)
		UpdatePolicy(ctx context.Context, in *UpdatePolicyReq, opts ...grpc.CallOption) (*SucResp, error)
		VerifyPermission(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error)
		GetPolicy(ctx context.Context, in *GetPolicyReq, opts ...grpc.CallOption) (*GetPolicyResp, error)
		GetAllBucketPolicy(ctx context.Context, in *GetAllBucketPolicyReq, opts ...grpc.CallOption) (*GetAllBucketPolicyResp, error)
		DelBucketAllPolicy(ctx context.Context, in *DelBucketAllPolicyReq, opts ...grpc.CallOption) (*SucResp, error)
		DelUserAllPolicy(ctx context.Context, in *DelUserAllPolicy, opts ...grpc.CallOption) (*SucResp, error)
		DelBucketAllHash(ctx context.Context, in *DelBucketAllHashReq, opts ...grpc.CallOption) (*SucResp, error)
	}

	defaultBucket struct {
		cli zrpc.Client
	}
)

func NewBucket(cli zrpc.Client) Bucket {
	return &defaultBucket{
		cli: cli,
	}
}

func (m *defaultBucket) DelBucket(ctx context.Context, in *DelBucketReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.DelBucket(ctx, in, opts...)
}

// rpc getAllBucket(GetAllBucketReq) returns(AllBucketResp); // 获取用户所有桶对象
func (m *defaultBucket) GetMyBucket(ctx context.Context, in *GetMyBucketReq, opts ...grpc.CallOption) (*AllBucketResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.GetMyBucket(ctx, in, opts...)
}

func (m *defaultBucket) GetManageBucket(ctx context.Context, in *GetManageBucketReq, opts ...grpc.CallOption) (*AllBucketResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.GetManageBucket(ctx, in, opts...)
}

// rpc getBucketByBucketName(GetBucketByBucketNameReq) returns(AllBucketResp); // 根据桶名模糊查询桶列表返回
func (m *defaultBucket) GetMyBucketByBucketName(ctx context.Context, in *GetBucketByBucketNameReq, opts ...grpc.CallOption) (*AllBucketResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.GetMyBucketByBucketName(ctx, in, opts...)
}

func (m *defaultBucket) GetManageBucketByBucketName(ctx context.Context, in *GetBucketByBucketNameReq, opts ...grpc.CallOption) (*AllBucketResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.GetManageBucketByBucketName(ctx, in, opts...)
}

func (m *defaultBucket) CountBucket(ctx context.Context, in *CountBucketReq, opts ...grpc.CallOption) (*CountBucketResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.CountBucket(ctx, in, opts...)
}

func (m *defaultBucket) CreateBucketInfo(ctx context.Context, in *CreateBucketInfoReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.CreateBucketInfo(ctx, in, opts...)
}

func (m *defaultBucket) UpdateBucketSizeAndNumInfo(ctx context.Context, in *UpdateBucketSizeAndNumReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.UpdateBucketSizeAndNumInfo(ctx, in, opts...)
}

func (m *defaultBucket) UpdateBucketPermission(ctx context.Context, in *UpdateBucketPermission, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.UpdateBucketPermission(ctx, in, opts...)
}

// 秒传逻辑
func (m *defaultBucket) AddHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.AddHashCode(ctx, in, opts...)
}

func (m *defaultBucket) DelHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.DelHashCode(ctx, in, opts...)
}

func (m *defaultBucket) HasHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.HasHashCode(ctx, in, opts...)
}

func (m *defaultBucket) AddPolicy(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.AddPolicy(ctx, in, opts...)
}

func (m *defaultBucket) RemovePolicy(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.RemovePolicy(ctx, in, opts...)
}

func (m *defaultBucket) UpdatePolicy(ctx context.Context, in *UpdatePolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.UpdatePolicy(ctx, in, opts...)
}

func (m *defaultBucket) VerifyPermission(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.VerifyPermission(ctx, in, opts...)
}

func (m *defaultBucket) GetPolicy(ctx context.Context, in *GetPolicyReq, opts ...grpc.CallOption) (*GetPolicyResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.GetPolicy(ctx, in, opts...)
}

func (m *defaultBucket) GetAllBucketPolicy(ctx context.Context, in *GetAllBucketPolicyReq, opts ...grpc.CallOption) (*GetAllBucketPolicyResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.GetAllBucketPolicy(ctx, in, opts...)
}

func (m *defaultBucket) DelBucketAllPolicy(ctx context.Context, in *DelBucketAllPolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.DelBucketAllPolicy(ctx, in, opts...)
}

func (m *defaultBucket) DelUserAllPolicy(ctx context.Context, in *DelUserAllPolicy, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.DelUserAllPolicy(ctx, in, opts...)
}

func (m *defaultBucket) DelBucketAllHash(ctx context.Context, in *DelBucketAllHashReq, opts ...grpc.CallOption) (*SucResp, error) {
	client := bucket.NewBucketClient(m.cli.Conn())
	return client.DelBucketAllHash(ctx, in, opts...)
}
