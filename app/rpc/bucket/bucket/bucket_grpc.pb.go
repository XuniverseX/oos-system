// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: bucket.proto

package bucket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BucketClient is the client API for Bucket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketClient interface {
	DelBucket(ctx context.Context, in *DelBucketReq, opts ...grpc.CallOption) (*SucResp, error)
	// rpc getAllBucket(GetAllBucketReq) returns(AllBucketResp); // 获取用户所有桶对象
	GetMyBucket(ctx context.Context, in *GetMyBucketReq, opts ...grpc.CallOption) (*AllBucketResp, error)
	GetManageBucket(ctx context.Context, in *GetManageBucketReq, opts ...grpc.CallOption) (*AllBucketResp, error)
	// rpc getBucketByBucketName(GetBucketByBucketNameReq) returns(AllBucketResp); // 根据桶名模糊查询桶列表返回
	GetMyBucketByBucketName(ctx context.Context, in *GetBucketByBucketNameReq, opts ...grpc.CallOption) (*AllBucketResp, error)
	GetManageBucketByBucketName(ctx context.Context, in *GetBucketByBucketNameReq, opts ...grpc.CallOption) (*AllBucketResp, error)
	CountBucket(ctx context.Context, in *CountBucketReq, opts ...grpc.CallOption) (*CountBucketResp, error)
	CreateBucketInfo(ctx context.Context, in *CreateBucketInfoReq, opts ...grpc.CallOption) (*SucResp, error)
	UpdateBucketSizeAndNumInfo(ctx context.Context, in *UpdateBucketSizeAndNumReq, opts ...grpc.CallOption) (*SucResp, error)
	UpdateBucketPermission(ctx context.Context, in *UpdateBucketPermission, opts ...grpc.CallOption) (*SucResp, error)
	// 秒传逻辑
	AddHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error)
	DelHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error)
	HasHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error)
	AddPolicy(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error)
	RemovePolicy(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error)
	UpdatePolicy(ctx context.Context, in *UpdatePolicyReq, opts ...grpc.CallOption) (*SucResp, error)
	VerifyPermission(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error)
	GetPolicy(ctx context.Context, in *GetPolicyReq, opts ...grpc.CallOption) (*GetPolicyResp, error)
	GetAllBucketPolicy(ctx context.Context, in *GetAllBucketPolicyReq, opts ...grpc.CallOption) (*GetAllBucketPolicyResp, error)
	DelBucketAllPolicy(ctx context.Context, in *DelBucketAllPolicyReq, opts ...grpc.CallOption) (*SucResp, error)
	DelUserAllPolicy(ctx context.Context, in *DelUserAllPolicy, opts ...grpc.CallOption) (*SucResp, error)
	DelBucketAllHash(ctx context.Context, in *DelBucketAllHashReq, opts ...grpc.CallOption) (*SucResp, error)
}

type bucketClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketClient(cc grpc.ClientConnInterface) BucketClient {
	return &bucketClient{cc}
}

func (c *bucketClient) DelBucket(ctx context.Context, in *DelBucketReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/delBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) GetMyBucket(ctx context.Context, in *GetMyBucketReq, opts ...grpc.CallOption) (*AllBucketResp, error) {
	out := new(AllBucketResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/getMyBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) GetManageBucket(ctx context.Context, in *GetManageBucketReq, opts ...grpc.CallOption) (*AllBucketResp, error) {
	out := new(AllBucketResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/getManageBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) GetMyBucketByBucketName(ctx context.Context, in *GetBucketByBucketNameReq, opts ...grpc.CallOption) (*AllBucketResp, error) {
	out := new(AllBucketResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/getMyBucketByBucketName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) GetManageBucketByBucketName(ctx context.Context, in *GetBucketByBucketNameReq, opts ...grpc.CallOption) (*AllBucketResp, error) {
	out := new(AllBucketResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/getManageBucketByBucketName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) CountBucket(ctx context.Context, in *CountBucketReq, opts ...grpc.CallOption) (*CountBucketResp, error) {
	out := new(CountBucketResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/countBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) CreateBucketInfo(ctx context.Context, in *CreateBucketInfoReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/createBucketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) UpdateBucketSizeAndNumInfo(ctx context.Context, in *UpdateBucketSizeAndNumReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/updateBucketSizeAndNumInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) UpdateBucketPermission(ctx context.Context, in *UpdateBucketPermission, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/updateBucketPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) AddHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/addHashCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) DelHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/delHashCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) HasHashCode(ctx context.Context, in *HashCodeReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/hasHashCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) AddPolicy(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/addPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) RemovePolicy(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/removePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) UpdatePolicy(ctx context.Context, in *UpdatePolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/updatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) VerifyPermission(ctx context.Context, in *PolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/verifyPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) GetPolicy(ctx context.Context, in *GetPolicyReq, opts ...grpc.CallOption) (*GetPolicyResp, error) {
	out := new(GetPolicyResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/getPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) GetAllBucketPolicy(ctx context.Context, in *GetAllBucketPolicyReq, opts ...grpc.CallOption) (*GetAllBucketPolicyResp, error) {
	out := new(GetAllBucketPolicyResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/getAllBucketPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) DelBucketAllPolicy(ctx context.Context, in *DelBucketAllPolicyReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/delBucketAllPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) DelUserAllPolicy(ctx context.Context, in *DelUserAllPolicy, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/delUserAllPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) DelBucketAllHash(ctx context.Context, in *DelBucketAllHashReq, opts ...grpc.CallOption) (*SucResp, error) {
	out := new(SucResp)
	err := c.cc.Invoke(ctx, "/bucket.bucket/delBucketAllHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServer is the server API for Bucket service.
// All implementations must embed UnimplementedBucketServer
// for forward compatibility
type BucketServer interface {
	DelBucket(context.Context, *DelBucketReq) (*SucResp, error)
	// rpc getAllBucket(GetAllBucketReq) returns(AllBucketResp); // 获取用户所有桶对象
	GetMyBucket(context.Context, *GetMyBucketReq) (*AllBucketResp, error)
	GetManageBucket(context.Context, *GetManageBucketReq) (*AllBucketResp, error)
	// rpc getBucketByBucketName(GetBucketByBucketNameReq) returns(AllBucketResp); // 根据桶名模糊查询桶列表返回
	GetMyBucketByBucketName(context.Context, *GetBucketByBucketNameReq) (*AllBucketResp, error)
	GetManageBucketByBucketName(context.Context, *GetBucketByBucketNameReq) (*AllBucketResp, error)
	CountBucket(context.Context, *CountBucketReq) (*CountBucketResp, error)
	CreateBucketInfo(context.Context, *CreateBucketInfoReq) (*SucResp, error)
	UpdateBucketSizeAndNumInfo(context.Context, *UpdateBucketSizeAndNumReq) (*SucResp, error)
	UpdateBucketPermission(context.Context, *UpdateBucketPermission) (*SucResp, error)
	// 秒传逻辑
	AddHashCode(context.Context, *HashCodeReq) (*SucResp, error)
	DelHashCode(context.Context, *HashCodeReq) (*SucResp, error)
	HasHashCode(context.Context, *HashCodeReq) (*SucResp, error)
	AddPolicy(context.Context, *PolicyReq) (*SucResp, error)
	RemovePolicy(context.Context, *PolicyReq) (*SucResp, error)
	UpdatePolicy(context.Context, *UpdatePolicyReq) (*SucResp, error)
	VerifyPermission(context.Context, *PolicyReq) (*SucResp, error)
	GetPolicy(context.Context, *GetPolicyReq) (*GetPolicyResp, error)
	GetAllBucketPolicy(context.Context, *GetAllBucketPolicyReq) (*GetAllBucketPolicyResp, error)
	DelBucketAllPolicy(context.Context, *DelBucketAllPolicyReq) (*SucResp, error)
	DelUserAllPolicy(context.Context, *DelUserAllPolicy) (*SucResp, error)
	DelBucketAllHash(context.Context, *DelBucketAllHashReq) (*SucResp, error)
	mustEmbedUnimplementedBucketServer()
}

// UnimplementedBucketServer must be embedded to have forward compatible implementations.
type UnimplementedBucketServer struct {
}

func (UnimplementedBucketServer) DelBucket(context.Context, *DelBucketReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBucket not implemented")
}
func (UnimplementedBucketServer) GetMyBucket(context.Context, *GetMyBucketReq) (*AllBucketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyBucket not implemented")
}
func (UnimplementedBucketServer) GetManageBucket(context.Context, *GetManageBucketReq) (*AllBucketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManageBucket not implemented")
}
func (UnimplementedBucketServer) GetMyBucketByBucketName(context.Context, *GetBucketByBucketNameReq) (*AllBucketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyBucketByBucketName not implemented")
}
func (UnimplementedBucketServer) GetManageBucketByBucketName(context.Context, *GetBucketByBucketNameReq) (*AllBucketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManageBucketByBucketName not implemented")
}
func (UnimplementedBucketServer) CountBucket(context.Context, *CountBucketReq) (*CountBucketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBucket not implemented")
}
func (UnimplementedBucketServer) CreateBucketInfo(context.Context, *CreateBucketInfoReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucketInfo not implemented")
}
func (UnimplementedBucketServer) UpdateBucketSizeAndNumInfo(context.Context, *UpdateBucketSizeAndNumReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketSizeAndNumInfo not implemented")
}
func (UnimplementedBucketServer) UpdateBucketPermission(context.Context, *UpdateBucketPermission) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketPermission not implemented")
}
func (UnimplementedBucketServer) AddHashCode(context.Context, *HashCodeReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHashCode not implemented")
}
func (UnimplementedBucketServer) DelHashCode(context.Context, *HashCodeReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelHashCode not implemented")
}
func (UnimplementedBucketServer) HasHashCode(context.Context, *HashCodeReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasHashCode not implemented")
}
func (UnimplementedBucketServer) AddPolicy(context.Context, *PolicyReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolicy not implemented")
}
func (UnimplementedBucketServer) RemovePolicy(context.Context, *PolicyReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePolicy not implemented")
}
func (UnimplementedBucketServer) UpdatePolicy(context.Context, *UpdatePolicyReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedBucketServer) VerifyPermission(context.Context, *PolicyReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPermission not implemented")
}
func (UnimplementedBucketServer) GetPolicy(context.Context, *GetPolicyReq) (*GetPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedBucketServer) GetAllBucketPolicy(context.Context, *GetAllBucketPolicyReq) (*GetAllBucketPolicyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBucketPolicy not implemented")
}
func (UnimplementedBucketServer) DelBucketAllPolicy(context.Context, *DelBucketAllPolicyReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBucketAllPolicy not implemented")
}
func (UnimplementedBucketServer) DelUserAllPolicy(context.Context, *DelUserAllPolicy) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserAllPolicy not implemented")
}
func (UnimplementedBucketServer) DelBucketAllHash(context.Context, *DelBucketAllHashReq) (*SucResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBucketAllHash not implemented")
}
func (UnimplementedBucketServer) mustEmbedUnimplementedBucketServer() {}

// UnsafeBucketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServer will
// result in compilation errors.
type UnsafeBucketServer interface {
	mustEmbedUnimplementedBucketServer()
}

func RegisterBucketServer(s grpc.ServiceRegistrar, srv BucketServer) {
	s.RegisterService(&Bucket_ServiceDesc, srv)
}

func _Bucket_DelBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).DelBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/delBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).DelBucket(ctx, req.(*DelBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_GetMyBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).GetMyBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/getMyBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).GetMyBucket(ctx, req.(*GetMyBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_GetManageBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManageBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).GetManageBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/getManageBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).GetManageBucket(ctx, req.(*GetManageBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_GetMyBucketByBucketName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketByBucketNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).GetMyBucketByBucketName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/getMyBucketByBucketName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).GetMyBucketByBucketName(ctx, req.(*GetBucketByBucketNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_GetManageBucketByBucketName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketByBucketNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).GetManageBucketByBucketName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/getManageBucketByBucketName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).GetManageBucketByBucketName(ctx, req.(*GetBucketByBucketNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_CountBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).CountBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/countBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).CountBucket(ctx, req.(*CountBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_CreateBucketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).CreateBucketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/createBucketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).CreateBucketInfo(ctx, req.(*CreateBucketInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_UpdateBucketSizeAndNumInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketSizeAndNumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).UpdateBucketSizeAndNumInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/updateBucketSizeAndNumInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).UpdateBucketSizeAndNumInfo(ctx, req.(*UpdateBucketSizeAndNumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_UpdateBucketPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketPermission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).UpdateBucketPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/updateBucketPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).UpdateBucketPermission(ctx, req.(*UpdateBucketPermission))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_AddHashCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).AddHashCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/addHashCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).AddHashCode(ctx, req.(*HashCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_DelHashCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).DelHashCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/delHashCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).DelHashCode(ctx, req.(*HashCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_HasHashCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).HasHashCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/hasHashCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).HasHashCode(ctx, req.(*HashCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_AddPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).AddPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/addPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).AddPolicy(ctx, req.(*PolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_RemovePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).RemovePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/removePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).RemovePolicy(ctx, req.(*PolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/updatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).UpdatePolicy(ctx, req.(*UpdatePolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_VerifyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).VerifyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/verifyPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).VerifyPermission(ctx, req.(*PolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/getPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).GetPolicy(ctx, req.(*GetPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_GetAllBucketPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllBucketPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).GetAllBucketPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/getAllBucketPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).GetAllBucketPolicy(ctx, req.(*GetAllBucketPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_DelBucketAllPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBucketAllPolicyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).DelBucketAllPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/delBucketAllPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).DelBucketAllPolicy(ctx, req.(*DelBucketAllPolicyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_DelUserAllPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserAllPolicy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).DelUserAllPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/delUserAllPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).DelUserAllPolicy(ctx, req.(*DelUserAllPolicy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_DelBucketAllHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBucketAllHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).DelBucketAllHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bucket.bucket/delBucketAllHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).DelBucketAllHash(ctx, req.(*DelBucketAllHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Bucket_ServiceDesc is the grpc.ServiceDesc for Bucket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bucket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bucket.bucket",
	HandlerType: (*BucketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "delBucket",
			Handler:    _Bucket_DelBucket_Handler,
		},
		{
			MethodName: "getMyBucket",
			Handler:    _Bucket_GetMyBucket_Handler,
		},
		{
			MethodName: "getManageBucket",
			Handler:    _Bucket_GetManageBucket_Handler,
		},
		{
			MethodName: "getMyBucketByBucketName",
			Handler:    _Bucket_GetMyBucketByBucketName_Handler,
		},
		{
			MethodName: "getManageBucketByBucketName",
			Handler:    _Bucket_GetManageBucketByBucketName_Handler,
		},
		{
			MethodName: "countBucket",
			Handler:    _Bucket_CountBucket_Handler,
		},
		{
			MethodName: "createBucketInfo",
			Handler:    _Bucket_CreateBucketInfo_Handler,
		},
		{
			MethodName: "updateBucketSizeAndNumInfo",
			Handler:    _Bucket_UpdateBucketSizeAndNumInfo_Handler,
		},
		{
			MethodName: "updateBucketPermission",
			Handler:    _Bucket_UpdateBucketPermission_Handler,
		},
		{
			MethodName: "addHashCode",
			Handler:    _Bucket_AddHashCode_Handler,
		},
		{
			MethodName: "delHashCode",
			Handler:    _Bucket_DelHashCode_Handler,
		},
		{
			MethodName: "hasHashCode",
			Handler:    _Bucket_HasHashCode_Handler,
		},
		{
			MethodName: "addPolicy",
			Handler:    _Bucket_AddPolicy_Handler,
		},
		{
			MethodName: "removePolicy",
			Handler:    _Bucket_RemovePolicy_Handler,
		},
		{
			MethodName: "updatePolicy",
			Handler:    _Bucket_UpdatePolicy_Handler,
		},
		{
			MethodName: "verifyPermission",
			Handler:    _Bucket_VerifyPermission_Handler,
		},
		{
			MethodName: "getPolicy",
			Handler:    _Bucket_GetPolicy_Handler,
		},
		{
			MethodName: "getAllBucketPolicy",
			Handler:    _Bucket_GetAllBucketPolicy_Handler,
		},
		{
			MethodName: "delBucketAllPolicy",
			Handler:    _Bucket_DelBucketAllPolicy_Handler,
		},
		{
			MethodName: "delUserAllPolicy",
			Handler:    _Bucket_DelUserAllPolicy_Handler,
		},
		{
			MethodName: "delBucketAllHash",
			Handler:    _Bucket_DelBucketAllHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bucket.proto",
}
