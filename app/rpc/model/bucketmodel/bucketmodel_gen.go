// Code generated by goctl. DO NOT EDIT.

package bucketmodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bucketFieldNames          = builder.RawFieldNames(&Bucket{})
	bucketRows                = strings.Join(bucketFieldNames, ",")
	bucketRowsExpectAutoSet   = strings.Join(stringx.Remove(bucketFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	bucketRowsWithPlaceHolder = strings.Join(stringx.Remove(bucketFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBucketIdPrefix         = "cache:bucket:id:"
	cacheBucketBucketNamePrefix = "cache:bucket:bucketName:"
)

type (
	bucketModel interface {
		Insert(ctx context.Context, data *Bucket) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Bucket, error)
		FindOneByBucketName(ctx context.Context, bucketName string) (*Bucket, error)
		Update(ctx context.Context, data *Bucket) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBucketModel struct {
		sqlc.CachedConn
		table string
	}

	Bucket struct {
		Id          int64     `db:"id"`           // id
		Username    string    `db:"username"`     // 用户名称
		BucketName  string    `db:"bucket_name"`  // 桶名称
		CapacityCur float64   `db:"capacity_cur"` // 当前桶存储数据量大小（以kb为单位）
		ObjectNum   int64     `db:"object_num"`   // 桶中对象数量
		Permission  int64     `db:"permission"`   // 桶权限（0 公共 | 1 私有 ）
		CreateTime  time.Time `db:"create_time"`  // 创建时间
		UpdateTime  time.Time `db:"update_time"`  // 更新时间
	}
)

func newBucketModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBucketModel {
	return &defaultBucketModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`bucket`",
	}
}

func (m *defaultBucketModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	bucketBucketNameKey := fmt.Sprintf("%s%v", cacheBucketBucketNamePrefix, data.BucketName)
	bucketIdKey := fmt.Sprintf("%s%v", cacheBucketIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, bucketBucketNameKey, bucketIdKey)
	return err
}

func (m *defaultBucketModel) FindOne(ctx context.Context, id int64) (*Bucket, error) {
	bucketIdKey := fmt.Sprintf("%s%v", cacheBucketIdPrefix, id)
	var resp Bucket
	err := m.QueryRowCtx(ctx, &resp, bucketIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bucketRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBucketModel) FindOneByBucketName(ctx context.Context, bucketName string) (*Bucket, error) {
	bucketBucketNameKey := fmt.Sprintf("%s%v", cacheBucketBucketNamePrefix, bucketName)
	var resp Bucket
	err := m.QueryRowIndexCtx(ctx, &resp, bucketBucketNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `bucket_name` = ? limit 1", bucketRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, bucketName); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBucketModel) Insert(ctx context.Context, data *Bucket) (sql.Result, error) {
	bucketBucketNameKey := fmt.Sprintf("%s%v", cacheBucketBucketNamePrefix, data.BucketName)
	bucketIdKey := fmt.Sprintf("%s%v", cacheBucketIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, bucketRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Username, data.BucketName, data.CapacityCur, data.ObjectNum, data.Permission)
	}, bucketBucketNameKey, bucketIdKey)
	return ret, err
}

func (m *defaultBucketModel) Update(ctx context.Context, newData *Bucket) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	bucketBucketNameKey := fmt.Sprintf("%s%v", cacheBucketBucketNamePrefix, data.BucketName)
	bucketIdKey := fmt.Sprintf("%s%v", cacheBucketIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, bucketRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.BucketName, newData.CapacityCur, newData.ObjectNum, newData.Permission, newData.Id)
	}, bucketBucketNameKey, bucketIdKey)
	return err
}

func (m *defaultBucketModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBucketIdPrefix, primary)
}

func (m *defaultBucketModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", bucketRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBucketModel) tableName() string {
	return m.table
}
