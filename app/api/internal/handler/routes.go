// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	bucket "oos-system/app/api/internal/handler/bucket"
	file "oos-system/app/api/internal/handler/file"
	user "oos-system/app/api/internal/handler/user"
	"oos-system/app/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/getcaptcha",
				Handler: user.GetcaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/register",
				Handler: user.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/getuserInfo",
				Handler: user.GetuserInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update",
				Handler: user.UpdatePasswordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/del",
				Handler: user.DeleteBySelfHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/bucket/getMyBucket",
				Handler: bucket.GetMyBucketHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/bucket/getManageBucket",
				Handler: bucket.GetManageBucketHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/bucket/getMyBucketByBucketName",
				Handler: bucket.GetMyBucketByBucketNameHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/bucket/getManageBucketByBucketName",
				Handler: bucket.GetManageBucketByBucketNameHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bucket/createBucket",
				Handler: bucket.CreateBucketHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/bucket/getFilePath",
				Handler: bucket.GetFilePathHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bucket/deleteFile",
				Handler: bucket.DeleteFileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bucket/createFileFolder",
				Handler: bucket.CreateFileFolderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bucket/addPolicy",
				Handler: bucket.AddPolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/bucket/getAllPolicy",
				Handler: bucket.GetAllPolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bucket/updateUserPolicy",
				Handler: bucket.UpdateUserPolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bucket/removeUserPolicy",
				Handler: bucket.RemoveUserPolicyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/bucket/updateBucket",
				Handler: bucket.UpdateBucketPermissionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/download/url",
				Handler: file.DownloadUrlHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/zhiyi-obj",
				Handler: file.PreviewHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/zhiyi-cloud",
				Handler: file.DownloadHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/chunk/upload",
				Handler: file.UploadChunkHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/chunk/upload",
				Handler: file.UploadChunkGetHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/nochunk/upload",
				Handler: file.UploadNoChunkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/chunk/merge",
				Handler: file.MergeChunkHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
